// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: examples/recover/v1/recover.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Init struct {
	AccountRecoverer string `protobuf:"bytes,1,opt,name=account_recoverer,json=accountRecoverer,proto3" json:"account_recoverer,omitempty"`
}

func (m *Init) Reset()         { *m = Init{} }
func (m *Init) String() string { return proto.CompactTextString(m) }
func (*Init) ProtoMessage()    {}
func (*Init) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b1abcc3db5af0ab, []int{0}
}
func (m *Init) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Init) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Init.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Init) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Init.Merge(m, src)
}
func (m *Init) XXX_Size() int {
	return m.Size()
}
func (m *Init) XXX_DiscardUnknown() {
	xxx_messageInfo_Init.DiscardUnknown(m)
}

var xxx_messageInfo_Init proto.InternalMessageInfo

func (m *Init) GetAccountRecoverer() string {
	if m != nil {
		return m.AccountRecoverer
	}
	return ""
}

type MsgSwapPublicKey struct {
	NewPublicKey []byte `protobuf:"bytes,1,opt,name=new_public_key,json=newPublicKey,proto3" json:"new_public_key,omitempty"`
}

func (m *MsgSwapPublicKey) Reset()         { *m = MsgSwapPublicKey{} }
func (m *MsgSwapPublicKey) String() string { return proto.CompactTextString(m) }
func (*MsgSwapPublicKey) ProtoMessage()    {}
func (*MsgSwapPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b1abcc3db5af0ab, []int{1}
}
func (m *MsgSwapPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapPublicKey.Merge(m, src)
}
func (m *MsgSwapPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapPublicKey proto.InternalMessageInfo

func (m *MsgSwapPublicKey) GetNewPublicKey() []byte {
	if m != nil {
		return m.NewPublicKey
	}
	return nil
}

func init() {
	proto.RegisterType((*Init)(nil), "examples.recover.v1.Init")
	proto.RegisterType((*MsgSwapPublicKey)(nil), "examples.recover.v1.MsgSwapPublicKey")
}

func init() { proto.RegisterFile("examples/recover/v1/recover.proto", fileDescriptor_3b1abcc3db5af0ab) }

var fileDescriptor_3b1abcc3db5af0ab = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x2f, 0x4a, 0x4d, 0xce, 0x2f, 0x4b, 0x2d, 0xd2, 0x2f, 0x33, 0x84,
	0x31, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x61, 0x4a, 0xf4, 0x60, 0xe2, 0x65, 0x86,
	0x4a, 0xc6, 0x5c, 0x2c, 0x9e, 0x79, 0x99, 0x25, 0x42, 0xda, 0x5c, 0x82, 0x89, 0xc9, 0xc9, 0xf9,
	0xa5, 0x79, 0x25, 0xf1, 0x50, 0xd9, 0xd4, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x01,
	0xa8, 0x44, 0x10, 0x4c, 0x5c, 0xc9, 0x82, 0x4b, 0xc0, 0xb7, 0x38, 0x3d, 0xb8, 0x3c, 0xb1, 0x20,
	0xa0, 0x34, 0x29, 0x27, 0x33, 0xd9, 0x3b, 0xb5, 0x52, 0x48, 0x85, 0x8b, 0x2f, 0x2f, 0xb5, 0x3c,
	0xbe, 0x00, 0x2c, 0x10, 0x9f, 0x9d, 0x5a, 0x09, 0xd6, 0xcd, 0x13, 0xc4, 0x93, 0x97, 0x5a, 0x0e,
	0x57, 0xe5, 0x64, 0x76, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x32, 0x50,
	0x5b, 0x8a, 0xf5, 0xb1, 0xf8, 0x24, 0x89, 0x0d, 0xec, 0x05, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x62, 0x45, 0xd0, 0xe7, 0x00, 0x00, 0x00,
}

func (m *Init) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Init) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Init) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountRecoverer) > 0 {
		i -= len(m.AccountRecoverer)
		copy(dAtA[i:], m.AccountRecoverer)
		i = encodeVarintRecover(dAtA, i, uint64(len(m.AccountRecoverer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPublicKey) > 0 {
		i -= len(m.NewPublicKey)
		copy(dAtA[i:], m.NewPublicKey)
		i = encodeVarintRecover(dAtA, i, uint64(len(m.NewPublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecover(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecover(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Init) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountRecoverer)
	if l > 0 {
		n += 1 + l + sovRecover(uint64(l))
	}
	return n
}

func (m *MsgSwapPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewPublicKey)
	if l > 0 {
		n += 1 + l + sovRecover(uint64(l))
	}
	return n
}

func sovRecover(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecover(x uint64) (n int) {
	return sovRecover(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Init) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Init: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Init: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRecoverer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecover
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountRecoverer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecover
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecover
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecover
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecover
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPublicKey = append(m.NewPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewPublicKey == nil {
				m.NewPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecover(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecover
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecover(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecover
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecover
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecover
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecover
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecover
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecover
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecover        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecover          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecover = fmt.Errorf("proto: unexpected end of group")
)
